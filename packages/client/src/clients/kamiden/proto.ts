// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: kamiden.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';
import { type CallContext, type CallOptions } from 'nice-grpc-common';

export const protobufPackage = 'kamiden';

/** Base type */
export interface Message {
  RoomIndex: number;
  AccountId: string;
  Message: string;
  /** optional uint64 BlockNumber = 5; */
  Timestamp: number;
}

export interface Movement {
  RoomIndex: number;
  AccountId: string;
  Timestamp: number;
}

export interface HarvestEnd {
  RoomIndex: number;
  KamiId: string;
  Timestamp: number;
}

export interface Kill {
  AccountID: string;
  Timestamp: number;
  RoomIndex: number;
  KillerId: string;
  KillerHealthSync: number;
  KillerHealthTotal: number;
  VictimId: string;
  VictimHealthSync: number;
  VictimHealthTotal: number;
  Bounty: string;
  Salvage: string;
  Spoils: string;
  IsDeath: boolean;
}

export interface BattleStats {
  Kills: number;
  Deaths: number;
  PNL: number;
}

export interface Feed {
  Movements: Movement[];
  HarvestEnds: HarvestEnd[];
  Kills: Kill[];
}

export interface AuctionBuy {
  AccountIndex: string;
  ItemIndex: number;
  Amount: number;
  Currency: number;
  Cost: number;
  Timestamp: number;
}

export interface RankRow {
  KamiName: string;
  OwnerName: string;
  OwnerAddress: string;
  Amount: number;
}

export interface Trade {
  TradeId: string;
  MakerId: string;
  TakerId: string;
  BuyOrderIndices: number[];
  BuyOrderAmounts: string[];
  SellOrderIndices: number[];
  SellOrderAmounts: string[];
  CreateTimestamp: string;
  CancelTimestamp: string;
  ExecuteTimestamp: string;
  CompleteTimestamp: string;
}

/** REQUESTS */
export interface RoomRequest {
  RoomIndex: number;
  Timestamp: number;
  Size?: number | undefined;
}

export interface StreamRequest {}

export interface BattlesRequest {
  KillerId?: string | undefined;
  VictimId?: string | undefined;
  Timestamp?: number | undefined;
}

export interface AuctionBuysRequest {
  ItemIndex?: number | undefined;
}

export interface BattleStatsRequest {
  KamiId?: string | undefined;
}

export interface RankingRequest {
  StartBlock: number;
  EndBlock: number;
  ApiKey: string;
  IsVip: boolean;
}

export interface TradesRequest {
  AccountId: string;
  Timestamp: string;
}

/** RESPONSE */
export interface RoomResponse {
  Messages: Message[];
  Feeds: Feed[];
}

export interface StreamResponse {
  Messages: Message[];
  Feed: Feed | undefined;
}

export interface AuctionBuysResponse {
  AuctionBuys: AuctionBuy[];
}

export interface BattlesResponse {
  Kills: Kill[];
}

export interface BattleStatsResponse {
  BattleStats: BattleStats | undefined;
}

export interface RankingResponse {
  Ranking: RankRow[];
}

export interface TradesResponse {
  Trades: Trade[];
}

function createBaseMessage(): Message {
  return { RoomIndex: 0, AccountId: '', Message: '', Timestamp: 0 };
}

export const Message: MessageFns<Message> = {
  encode(message: Message, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.RoomIndex !== 0) {
      writer.uint32(8).uint32(message.RoomIndex);
    }
    if (message.AccountId !== '') {
      writer.uint32(18).string(message.AccountId);
    }
    if (message.Message !== '') {
      writer.uint32(26).string(message.Message);
    }
    if (message.Timestamp !== 0) {
      writer.uint32(32).uint64(message.Timestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.RoomIndex = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.AccountId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.Message = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.Timestamp = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<Message>): Message {
    return Message.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Message>): Message {
    const message = createBaseMessage();
    message.RoomIndex = object.RoomIndex ?? 0;
    message.AccountId = object.AccountId ?? '';
    message.Message = object.Message ?? '';
    message.Timestamp = object.Timestamp ?? 0;
    return message;
  },
};

function createBaseMovement(): Movement {
  return { RoomIndex: 0, AccountId: '', Timestamp: 0 };
}

export const Movement: MessageFns<Movement> = {
  encode(message: Movement, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.RoomIndex !== 0) {
      writer.uint32(8).uint32(message.RoomIndex);
    }
    if (message.AccountId !== '') {
      writer.uint32(18).string(message.AccountId);
    }
    if (message.Timestamp !== 0) {
      writer.uint32(24).uint64(message.Timestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Movement {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMovement();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.RoomIndex = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.AccountId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.Timestamp = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<Movement>): Movement {
    return Movement.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Movement>): Movement {
    const message = createBaseMovement();
    message.RoomIndex = object.RoomIndex ?? 0;
    message.AccountId = object.AccountId ?? '';
    message.Timestamp = object.Timestamp ?? 0;
    return message;
  },
};

function createBaseHarvestEnd(): HarvestEnd {
  return { RoomIndex: 0, KamiId: '', Timestamp: 0 };
}

export const HarvestEnd: MessageFns<HarvestEnd> = {
  encode(message: HarvestEnd, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.RoomIndex !== 0) {
      writer.uint32(8).uint32(message.RoomIndex);
    }
    if (message.KamiId !== '') {
      writer.uint32(18).string(message.KamiId);
    }
    if (message.Timestamp !== 0) {
      writer.uint32(24).uint64(message.Timestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HarvestEnd {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHarvestEnd();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.RoomIndex = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.KamiId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.Timestamp = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<HarvestEnd>): HarvestEnd {
    return HarvestEnd.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HarvestEnd>): HarvestEnd {
    const message = createBaseHarvestEnd();
    message.RoomIndex = object.RoomIndex ?? 0;
    message.KamiId = object.KamiId ?? '';
    message.Timestamp = object.Timestamp ?? 0;
    return message;
  },
};

function createBaseKill(): Kill {
  return {
    AccountID: '',
    Timestamp: 0,
    RoomIndex: 0,
    KillerId: '',
    KillerHealthSync: 0,
    KillerHealthTotal: 0,
    VictimId: '',
    VictimHealthSync: 0,
    VictimHealthTotal: 0,
    Bounty: '',
    Salvage: '',
    Spoils: '',
    IsDeath: false,
  };
}

export const Kill: MessageFns<Kill> = {
  encode(message: Kill, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.AccountID !== '') {
      writer.uint32(10).string(message.AccountID);
    }
    if (message.Timestamp !== 0) {
      writer.uint32(16).uint64(message.Timestamp);
    }
    if (message.RoomIndex !== 0) {
      writer.uint32(24).uint32(message.RoomIndex);
    }
    if (message.KillerId !== '') {
      writer.uint32(34).string(message.KillerId);
    }
    if (message.KillerHealthSync !== 0) {
      writer.uint32(40).int32(message.KillerHealthSync);
    }
    if (message.KillerHealthTotal !== 0) {
      writer.uint32(48).int32(message.KillerHealthTotal);
    }
    if (message.VictimId !== '') {
      writer.uint32(58).string(message.VictimId);
    }
    if (message.VictimHealthSync !== 0) {
      writer.uint32(64).int32(message.VictimHealthSync);
    }
    if (message.VictimHealthTotal !== 0) {
      writer.uint32(72).int32(message.VictimHealthTotal);
    }
    if (message.Bounty !== '') {
      writer.uint32(82).string(message.Bounty);
    }
    if (message.Salvage !== '') {
      writer.uint32(90).string(message.Salvage);
    }
    if (message.Spoils !== '') {
      writer.uint32(98).string(message.Spoils);
    }
    if (message.IsDeath !== false) {
      writer.uint32(104).bool(message.IsDeath);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Kill {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKill();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.AccountID = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.Timestamp = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.RoomIndex = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.KillerId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.KillerHealthSync = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.KillerHealthTotal = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.VictimId = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.VictimHealthSync = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.VictimHealthTotal = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.Bounty = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.Salvage = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.Spoils = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.IsDeath = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<Kill>): Kill {
    return Kill.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Kill>): Kill {
    const message = createBaseKill();
    message.AccountID = object.AccountID ?? '';
    message.Timestamp = object.Timestamp ?? 0;
    message.RoomIndex = object.RoomIndex ?? 0;
    message.KillerId = object.KillerId ?? '';
    message.KillerHealthSync = object.KillerHealthSync ?? 0;
    message.KillerHealthTotal = object.KillerHealthTotal ?? 0;
    message.VictimId = object.VictimId ?? '';
    message.VictimHealthSync = object.VictimHealthSync ?? 0;
    message.VictimHealthTotal = object.VictimHealthTotal ?? 0;
    message.Bounty = object.Bounty ?? '';
    message.Salvage = object.Salvage ?? '';
    message.Spoils = object.Spoils ?? '';
    message.IsDeath = object.IsDeath ?? false;
    return message;
  },
};

function createBaseBattleStats(): BattleStats {
  return { Kills: 0, Deaths: 0, PNL: 0 };
}

export const BattleStats: MessageFns<BattleStats> = {
  encode(message: BattleStats, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.Kills !== 0) {
      writer.uint32(8).uint32(message.Kills);
    }
    if (message.Deaths !== 0) {
      writer.uint32(16).uint32(message.Deaths);
    }
    if (message.PNL !== 0) {
      writer.uint32(24).int64(message.PNL);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BattleStats {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBattleStats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.Kills = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.Deaths = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.PNL = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<BattleStats>): BattleStats {
    return BattleStats.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BattleStats>): BattleStats {
    const message = createBaseBattleStats();
    message.Kills = object.Kills ?? 0;
    message.Deaths = object.Deaths ?? 0;
    message.PNL = object.PNL ?? 0;
    return message;
  },
};

function createBaseFeed(): Feed {
  return { Movements: [], HarvestEnds: [], Kills: [] };
}

export const Feed: MessageFns<Feed> = {
  encode(message: Feed, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.Movements) {
      Movement.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.HarvestEnds) {
      HarvestEnd.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.Kills) {
      Kill.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Feed {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeed();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Movements.push(Movement.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.HarvestEnds.push(HarvestEnd.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.Kills.push(Kill.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<Feed>): Feed {
    return Feed.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Feed>): Feed {
    const message = createBaseFeed();
    message.Movements = object.Movements?.map((e) => Movement.fromPartial(e)) || [];
    message.HarvestEnds = object.HarvestEnds?.map((e) => HarvestEnd.fromPartial(e)) || [];
    message.Kills = object.Kills?.map((e) => Kill.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAuctionBuy(): AuctionBuy {
  return { AccountIndex: '', ItemIndex: 0, Amount: 0, Currency: 0, Cost: 0, Timestamp: 0 };
}

export const AuctionBuy: MessageFns<AuctionBuy> = {
  encode(message: AuctionBuy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.AccountIndex !== '') {
      writer.uint32(10).string(message.AccountIndex);
    }
    if (message.ItemIndex !== 0) {
      writer.uint32(16).uint32(message.ItemIndex);
    }
    if (message.Amount !== 0) {
      writer.uint32(24).uint32(message.Amount);
    }
    if (message.Currency !== 0) {
      writer.uint32(32).uint32(message.Currency);
    }
    if (message.Cost !== 0) {
      writer.uint32(40).uint64(message.Cost);
    }
    if (message.Timestamp !== 0) {
      writer.uint32(48).uint64(message.Timestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuctionBuy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuctionBuy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.AccountIndex = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.ItemIndex = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.Amount = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.Currency = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.Cost = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.Timestamp = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AuctionBuy>): AuctionBuy {
    return AuctionBuy.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AuctionBuy>): AuctionBuy {
    const message = createBaseAuctionBuy();
    message.AccountIndex = object.AccountIndex ?? '';
    message.ItemIndex = object.ItemIndex ?? 0;
    message.Amount = object.Amount ?? 0;
    message.Currency = object.Currency ?? 0;
    message.Cost = object.Cost ?? 0;
    message.Timestamp = object.Timestamp ?? 0;
    return message;
  },
};

function createBaseRankRow(): RankRow {
  return { KamiName: '', OwnerName: '', OwnerAddress: '', Amount: 0 };
}

export const RankRow: MessageFns<RankRow> = {
  encode(message: RankRow, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.KamiName !== '') {
      writer.uint32(10).string(message.KamiName);
    }
    if (message.OwnerName !== '') {
      writer.uint32(18).string(message.OwnerName);
    }
    if (message.OwnerAddress !== '') {
      writer.uint32(26).string(message.OwnerAddress);
    }
    if (message.Amount !== 0) {
      writer.uint32(32).uint64(message.Amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RankRow {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRankRow();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.KamiName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.OwnerName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.OwnerAddress = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.Amount = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RankRow>): RankRow {
    return RankRow.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RankRow>): RankRow {
    const message = createBaseRankRow();
    message.KamiName = object.KamiName ?? '';
    message.OwnerName = object.OwnerName ?? '';
    message.OwnerAddress = object.OwnerAddress ?? '';
    message.Amount = object.Amount ?? 0;
    return message;
  },
};

function createBaseTrade(): Trade {
  return {
    TradeId: '',
    MakerId: '',
    TakerId: '',
    BuyOrderIndices: [],
    BuyOrderAmounts: [],
    SellOrderIndices: [],
    SellOrderAmounts: [],
    CreateTimestamp: '',
    CancelTimestamp: '',
    ExecuteTimestamp: '',
    CompleteTimestamp: '',
  };
}

export const Trade: MessageFns<Trade> = {
  encode(message: Trade, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.TradeId !== '') {
      writer.uint32(10).string(message.TradeId);
    }
    if (message.MakerId !== '') {
      writer.uint32(18).string(message.MakerId);
    }
    if (message.TakerId !== '') {
      writer.uint32(26).string(message.TakerId);
    }
    writer.uint32(34).fork();
    for (const v of message.BuyOrderIndices) {
      writer.uint32(v);
    }
    writer.join();
    for (const v of message.BuyOrderAmounts) {
      writer.uint32(42).string(v!);
    }
    writer.uint32(50).fork();
    for (const v of message.SellOrderIndices) {
      writer.uint32(v);
    }
    writer.join();
    for (const v of message.SellOrderAmounts) {
      writer.uint32(58).string(v!);
    }
    if (message.CreateTimestamp !== '') {
      writer.uint32(66).string(message.CreateTimestamp);
    }
    if (message.CancelTimestamp !== '') {
      writer.uint32(74).string(message.CancelTimestamp);
    }
    if (message.ExecuteTimestamp !== '') {
      writer.uint32(82).string(message.ExecuteTimestamp);
    }
    if (message.CompleteTimestamp !== '') {
      writer.uint32(90).string(message.CompleteTimestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Trade {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrade();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.TradeId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.MakerId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.TakerId = reader.string();
          continue;
        }
        case 4: {
          if (tag === 32) {
            message.BuyOrderIndices.push(reader.uint32());

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.BuyOrderIndices.push(reader.uint32());
            }

            continue;
          }

          break;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.BuyOrderAmounts.push(reader.string());
          continue;
        }
        case 6: {
          if (tag === 48) {
            message.SellOrderIndices.push(reader.uint32());

            continue;
          }

          if (tag === 50) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.SellOrderIndices.push(reader.uint32());
            }

            continue;
          }

          break;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.SellOrderAmounts.push(reader.string());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.CreateTimestamp = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.CancelTimestamp = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.ExecuteTimestamp = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.CompleteTimestamp = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<Trade>): Trade {
    return Trade.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Trade>): Trade {
    const message = createBaseTrade();
    message.TradeId = object.TradeId ?? '';
    message.MakerId = object.MakerId ?? '';
    message.TakerId = object.TakerId ?? '';
    message.BuyOrderIndices = object.BuyOrderIndices?.map((e) => e) || [];
    message.BuyOrderAmounts = object.BuyOrderAmounts?.map((e) => e) || [];
    message.SellOrderIndices = object.SellOrderIndices?.map((e) => e) || [];
    message.SellOrderAmounts = object.SellOrderAmounts?.map((e) => e) || [];
    message.CreateTimestamp = object.CreateTimestamp ?? '';
    message.CancelTimestamp = object.CancelTimestamp ?? '';
    message.ExecuteTimestamp = object.ExecuteTimestamp ?? '';
    message.CompleteTimestamp = object.CompleteTimestamp ?? '';
    return message;
  },
};

function createBaseRoomRequest(): RoomRequest {
  return { RoomIndex: 0, Timestamp: 0, Size: undefined };
}

export const RoomRequest: MessageFns<RoomRequest> = {
  encode(message: RoomRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.RoomIndex !== 0) {
      writer.uint32(8).uint32(message.RoomIndex);
    }
    if (message.Timestamp !== 0) {
      writer.uint32(16).uint64(message.Timestamp);
    }
    if (message.Size !== undefined) {
      writer.uint32(24).uint32(message.Size);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RoomRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoomRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.RoomIndex = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.Timestamp = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.Size = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RoomRequest>): RoomRequest {
    return RoomRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RoomRequest>): RoomRequest {
    const message = createBaseRoomRequest();
    message.RoomIndex = object.RoomIndex ?? 0;
    message.Timestamp = object.Timestamp ?? 0;
    message.Size = object.Size ?? undefined;
    return message;
  },
};

function createBaseStreamRequest(): StreamRequest {
  return {};
}

export const StreamRequest: MessageFns<StreamRequest> = {
  encode(_: StreamRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<StreamRequest>): StreamRequest {
    return StreamRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<StreamRequest>): StreamRequest {
    const message = createBaseStreamRequest();
    return message;
  },
};

function createBaseBattlesRequest(): BattlesRequest {
  return { KillerId: undefined, VictimId: undefined, Timestamp: undefined };
}

export const BattlesRequest: MessageFns<BattlesRequest> = {
  encode(message: BattlesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.KillerId !== undefined) {
      writer.uint32(10).string(message.KillerId);
    }
    if (message.VictimId !== undefined) {
      writer.uint32(18).string(message.VictimId);
    }
    if (message.Timestamp !== undefined) {
      writer.uint32(24).uint64(message.Timestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BattlesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBattlesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.KillerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.VictimId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.Timestamp = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<BattlesRequest>): BattlesRequest {
    return BattlesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BattlesRequest>): BattlesRequest {
    const message = createBaseBattlesRequest();
    message.KillerId = object.KillerId ?? undefined;
    message.VictimId = object.VictimId ?? undefined;
    message.Timestamp = object.Timestamp ?? undefined;
    return message;
  },
};

function createBaseAuctionBuysRequest(): AuctionBuysRequest {
  return { ItemIndex: undefined };
}

export const AuctionBuysRequest: MessageFns<AuctionBuysRequest> = {
  encode(message: AuctionBuysRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ItemIndex !== undefined) {
      writer.uint32(8).uint32(message.ItemIndex);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuctionBuysRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuctionBuysRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.ItemIndex = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AuctionBuysRequest>): AuctionBuysRequest {
    return AuctionBuysRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AuctionBuysRequest>): AuctionBuysRequest {
    const message = createBaseAuctionBuysRequest();
    message.ItemIndex = object.ItemIndex ?? undefined;
    return message;
  },
};

function createBaseBattleStatsRequest(): BattleStatsRequest {
  return { KamiId: undefined };
}

export const BattleStatsRequest: MessageFns<BattleStatsRequest> = {
  encode(message: BattleStatsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.KamiId !== undefined) {
      writer.uint32(10).string(message.KamiId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BattleStatsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBattleStatsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.KamiId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<BattleStatsRequest>): BattleStatsRequest {
    return BattleStatsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BattleStatsRequest>): BattleStatsRequest {
    const message = createBaseBattleStatsRequest();
    message.KamiId = object.KamiId ?? undefined;
    return message;
  },
};

function createBaseRankingRequest(): RankingRequest {
  return { StartBlock: 0, EndBlock: 0, ApiKey: '', IsVip: false };
}

export const RankingRequest: MessageFns<RankingRequest> = {
  encode(message: RankingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.StartBlock !== 0) {
      writer.uint32(8).uint64(message.StartBlock);
    }
    if (message.EndBlock !== 0) {
      writer.uint32(16).uint64(message.EndBlock);
    }
    if (message.ApiKey !== '') {
      writer.uint32(26).string(message.ApiKey);
    }
    if (message.IsVip !== false) {
      writer.uint32(32).bool(message.IsVip);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RankingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRankingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.StartBlock = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.EndBlock = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ApiKey = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.IsVip = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RankingRequest>): RankingRequest {
    return RankingRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RankingRequest>): RankingRequest {
    const message = createBaseRankingRequest();
    message.StartBlock = object.StartBlock ?? 0;
    message.EndBlock = object.EndBlock ?? 0;
    message.ApiKey = object.ApiKey ?? '';
    message.IsVip = object.IsVip ?? false;
    return message;
  },
};

function createBaseTradesRequest(): TradesRequest {
  return { AccountId: '', Timestamp: '' };
}

export const TradesRequest: MessageFns<TradesRequest> = {
  encode(message: TradesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.AccountId !== '') {
      writer.uint32(10).string(message.AccountId);
    }
    if (message.Timestamp !== '') {
      writer.uint32(18).string(message.Timestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TradesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTradesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.AccountId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.Timestamp = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<TradesRequest>): TradesRequest {
    return TradesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TradesRequest>): TradesRequest {
    const message = createBaseTradesRequest();
    message.AccountId = object.AccountId ?? '';
    message.Timestamp = object.Timestamp ?? '';
    return message;
  },
};

function createBaseRoomResponse(): RoomResponse {
  return { Messages: [], Feeds: [] };
}

export const RoomResponse: MessageFns<RoomResponse> = {
  encode(message: RoomResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.Messages) {
      Message.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.Feeds) {
      Feed.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RoomResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoomResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Messages.push(Message.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.Feeds.push(Feed.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RoomResponse>): RoomResponse {
    return RoomResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RoomResponse>): RoomResponse {
    const message = createBaseRoomResponse();
    message.Messages = object.Messages?.map((e) => Message.fromPartial(e)) || [];
    message.Feeds = object.Feeds?.map((e) => Feed.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStreamResponse(): StreamResponse {
  return { Messages: [], Feed: undefined };
}

export const StreamResponse: MessageFns<StreamResponse> = {
  encode(message: StreamResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.Messages) {
      Message.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.Feed !== undefined) {
      Feed.encode(message.Feed, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Messages.push(Message.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.Feed = Feed.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<StreamResponse>): StreamResponse {
    return StreamResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamResponse>): StreamResponse {
    const message = createBaseStreamResponse();
    message.Messages = object.Messages?.map((e) => Message.fromPartial(e)) || [];
    message.Feed =
      object.Feed !== undefined && object.Feed !== null ? Feed.fromPartial(object.Feed) : undefined;
    return message;
  },
};

function createBaseAuctionBuysResponse(): AuctionBuysResponse {
  return { AuctionBuys: [] };
}

export const AuctionBuysResponse: MessageFns<AuctionBuysResponse> = {
  encode(message: AuctionBuysResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.AuctionBuys) {
      AuctionBuy.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuctionBuysResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuctionBuysResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.AuctionBuys.push(AuctionBuy.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AuctionBuysResponse>): AuctionBuysResponse {
    return AuctionBuysResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AuctionBuysResponse>): AuctionBuysResponse {
    const message = createBaseAuctionBuysResponse();
    message.AuctionBuys = object.AuctionBuys?.map((e) => AuctionBuy.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBattlesResponse(): BattlesResponse {
  return { Kills: [] };
}

export const BattlesResponse: MessageFns<BattlesResponse> = {
  encode(message: BattlesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.Kills) {
      Kill.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BattlesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBattlesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Kills.push(Kill.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<BattlesResponse>): BattlesResponse {
    return BattlesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BattlesResponse>): BattlesResponse {
    const message = createBaseBattlesResponse();
    message.Kills = object.Kills?.map((e) => Kill.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBattleStatsResponse(): BattleStatsResponse {
  return { BattleStats: undefined };
}

export const BattleStatsResponse: MessageFns<BattleStatsResponse> = {
  encode(message: BattleStatsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.BattleStats !== undefined) {
      BattleStats.encode(message.BattleStats, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BattleStatsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBattleStatsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.BattleStats = BattleStats.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<BattleStatsResponse>): BattleStatsResponse {
    return BattleStatsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BattleStatsResponse>): BattleStatsResponse {
    const message = createBaseBattleStatsResponse();
    message.BattleStats =
      object.BattleStats !== undefined && object.BattleStats !== null
        ? BattleStats.fromPartial(object.BattleStats)
        : undefined;
    return message;
  },
};

function createBaseRankingResponse(): RankingResponse {
  return { Ranking: [] };
}

export const RankingResponse: MessageFns<RankingResponse> = {
  encode(message: RankingResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.Ranking) {
      RankRow.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RankingResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRankingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Ranking.push(RankRow.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RankingResponse>): RankingResponse {
    return RankingResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RankingResponse>): RankingResponse {
    const message = createBaseRankingResponse();
    message.Ranking = object.Ranking?.map((e) => RankRow.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTradesResponse(): TradesResponse {
  return { Trades: [] };
}

export const TradesResponse: MessageFns<TradesResponse> = {
  encode(message: TradesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.Trades) {
      Trade.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TradesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTradesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Trades.push(Trade.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<TradesResponse>): TradesResponse {
    return TradesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TradesResponse>): TradesResponse {
    const message = createBaseTradesResponse();
    message.Trades = object.Trades?.map((e) => Trade.fromPartial(e)) || [];
    return message;
  },
};

/** Replies */
export type KamidenServiceDefinition = typeof KamidenServiceDefinition;
export const KamidenServiceDefinition = {
  name: 'KamidenService',
  fullName: 'kamiden.KamidenService',
  methods: {
    /** Requests the latest block number based on the latest ECS state. */
    getRoomMessages: {
      name: 'GetRoomMessages',
      requestType: RoomRequest,
      requestStream: false,
      responseType: RoomResponse,
      responseStream: false,
      options: {},
    },
    getAuctionBuys: {
      name: 'GetAuctionBuys',
      requestType: AuctionBuysRequest,
      requestStream: false,
      responseType: AuctionBuysResponse,
      responseStream: false,
      options: {},
    },
    getBattles: {
      name: 'GetBattles',
      requestType: BattlesRequest,
      requestStream: false,
      responseType: BattlesResponse,
      responseStream: false,
      options: {},
    },
    getBattleStats: {
      name: 'GetBattleStats',
      requestType: BattleStatsRequest,
      requestStream: false,
      responseType: BattleStatsResponse,
      responseStream: false,
      options: {},
    },
    getRanking: {
      name: 'GetRanking',
      requestType: RankingRequest,
      requestStream: false,
      responseType: RankingResponse,
      responseStream: false,
      options: {},
    },
    getTradeHistory: {
      name: 'GetTradeHistory',
      requestType: TradesRequest,
      requestStream: false,
      responseType: TradesResponse,
      responseStream: false,
      options: {},
    },
    getOpenOffers: {
      name: 'GetOpenOffers',
      requestType: TradesRequest,
      requestStream: false,
      responseType: TradesResponse,
      responseStream: false,
      options: {},
    },
    /** Stream */
    subscribeToStream: {
      name: 'SubscribeToStream',
      requestType: StreamRequest,
      requestStream: false,
      responseType: StreamResponse,
      responseStream: true,
      options: {},
    },
  },
} as const;

export interface KamidenServiceImplementation<CallContextExt = {}> {
  /** Requests the latest block number based on the latest ECS state. */
  getRoomMessages(
    request: RoomRequest,
    context: CallContext & CallContextExt
  ): Promise<DeepPartial<RoomResponse>>;
  getAuctionBuys(
    request: AuctionBuysRequest,
    context: CallContext & CallContextExt
  ): Promise<DeepPartial<AuctionBuysResponse>>;
  getBattles(
    request: BattlesRequest,
    context: CallContext & CallContextExt
  ): Promise<DeepPartial<BattlesResponse>>;
  getBattleStats(
    request: BattleStatsRequest,
    context: CallContext & CallContextExt
  ): Promise<DeepPartial<BattleStatsResponse>>;
  getRanking(
    request: RankingRequest,
    context: CallContext & CallContextExt
  ): Promise<DeepPartial<RankingResponse>>;
  getTradeHistory(
    request: TradesRequest,
    context: CallContext & CallContextExt
  ): Promise<DeepPartial<TradesResponse>>;
  getOpenOffers(
    request: TradesRequest,
    context: CallContext & CallContextExt
  ): Promise<DeepPartial<TradesResponse>>;
  /** Stream */
  subscribeToStream(
    request: StreamRequest,
    context: CallContext & CallContextExt
  ): ServerStreamingMethodResult<DeepPartial<StreamResponse>>;
}

export interface KamidenServiceClient<CallOptionsExt = {}> {
  /** Requests the latest block number based on the latest ECS state. */
  getRoomMessages(
    request: DeepPartial<RoomRequest>,
    options?: CallOptions & CallOptionsExt
  ): Promise<RoomResponse>;
  getAuctionBuys(
    request: DeepPartial<AuctionBuysRequest>,
    options?: CallOptions & CallOptionsExt
  ): Promise<AuctionBuysResponse>;
  getBattles(
    request: DeepPartial<BattlesRequest>,
    options?: CallOptions & CallOptionsExt
  ): Promise<BattlesResponse>;
  getBattleStats(
    request: DeepPartial<BattleStatsRequest>,
    options?: CallOptions & CallOptionsExt
  ): Promise<BattleStatsResponse>;
  getRanking(
    request: DeepPartial<RankingRequest>,
    options?: CallOptions & CallOptionsExt
  ): Promise<RankingResponse>;
  getTradeHistory(
    request: DeepPartial<TradesRequest>,
    options?: CallOptions & CallOptionsExt
  ): Promise<TradesResponse>;
  getOpenOffers(
    request: DeepPartial<TradesRequest>,
    options?: CallOptions & CallOptionsExt
  ): Promise<TradesResponse>;
  /** Stream */
  subscribeToStream(
    request: DeepPartial<StreamRequest>,
    options?: CallOptions & CallOptionsExt
  ): AsyncIterable<StreamResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error('Value is larger than Number.MAX_SAFE_INTEGER');
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error('Value is smaller than Number.MIN_SAFE_INTEGER');
  }
  return num;
}

export type ServerStreamingMethodResult<Response> = {
  [Symbol.asyncIterator](): AsyncIterator<Response, void>;
};

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
