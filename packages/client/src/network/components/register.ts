// Autogenerated using mud component-types
import { World } from '@mud-classic/recs';
import {
  defineBoolComponent,
  defineLoadingStateComponent,
  defineNumberArrayComponent,
  defineNumberComponent,
  defineStatComponent,
  defineStringComponent,
  defineTimelockComponent,
} from './definitions';

export type Components = ReturnType<typeof createComponents>;

// define functions for registration
export function createComponents(world: World) {
  return {
    OperatorAddress: defineStringComponent(world, 'OperatorAddress', 'component.address.operator', true),
    OwnerAddress: defineStringComponent(world, 'OwnerAddress', 'component.address.owner', true),
    Affinity: defineStringComponent(world, 'Affinity', 'component.affiinity'),
    Balance: defineNumberComponent(world, 'Balance', 'component.balance'),
    Blacklist: defineNumberArrayComponent(world, 'Blacklist', 'component.blacklist'),
    RevealBlock: defineNumberComponent(world, 'RevealBlock', 'component.block.reveal'),
    OperatorCache: defineNumberComponent(world, 'OperatorCache', 'component.cache.operator'),
    Cost: defineNumberComponent(world, 'Cost', 'component.cost'),
    Decay: defineNumberComponent(world, 'Decay', 'component.decay'),
    DescriptionAlt: defineStringComponent(world, 'DescriptionAlt', 'component.description.alt'),
    Description: defineStringComponent(world, 'Description', 'component.description'),
    EntityType: defineStringComponent(world, 'EntityType', 'component.type.entity', true),
    Exits: defineNumberArrayComponent(world, 'Exits', 'component.exits'),
    Experience: defineNumberComponent(world, 'Experience', 'component.experience'),
    For: defineStringComponent(world, 'For', 'component.for'),
    HasFlag: defineBoolComponent(world, 'HasFlag', 'component.has.flag'),
    Harmony: defineStatComponent(world, 'Harmony', 'component.stat.harmony'),
    Health: defineStatComponent(world, 'Health', 'component.stat.health'),
    FromID: defineStringComponent(world, 'FromID', 'component.id.from', true),
    HolderID: defineStringComponent(world, 'HolderID', 'component.id.holder', true),
    OwnsFlagID: defineStringComponent(world, 'OwnsFlagID', 'component.id.flag.owns', true),
    OwnsInvID: defineStringComponent(world, 'OwnsInvID', 'component.id.inventory.owns', true),
    OwnsKamiID: defineStringComponent(world, 'OwnsKamiID', 'component.id.kami.owns', true),
    OwnsQuestID: defineStringComponent(world, 'OwnsQuestID', 'component.id.quest.owns', true),
    OwnsRsID: defineStringComponent(world, 'OwnsRsID', 'component.id.relationship.owns', true),
    OwnsSkillID: defineStringComponent(world, 'OwnsSkillID', 'component.id.skill.owns', true),
    OwnsTaxID: defineStringComponent(world, 'OwnsTaxID', 'component.id.tax.owns', true),
    OwnsTradeID: defineStringComponent(world, 'OwnsTradeID', 'component.id.trade.owns', true),
    AnchorID: defineStringComponent(world, 'AnchorID', 'component.id.anchor', true),
    SourceID: defineStringComponent(world, 'SourceID', 'component.id.source', true),
    TypeID: defineStringComponent(world, 'TypeID', 'component.id.type', true),
    TargetID: defineStringComponent(world, 'TargetID', 'component.id.target', true),
    ToID: defineStringComponent(world, 'ToID', 'component.id.to', true),
    Index: defineNumberComponent(world, 'Index', 'component.index'),
    AccountIndex: defineNumberComponent(world, 'AccountIndex', 'component.index.account', true),
    BackgroundIndex: defineNumberComponent(world, 'BackgroundIndex', 'component.index.background'),
    BodyIndex: defineNumberComponent(world, 'BodyIndex', 'component.index.body'),
    ColorIndex: defineNumberComponent(world, 'ColorIndex', 'component.index.color'),
    CurrencyIndex: defineNumberComponent(world, 'CurrencyIndex', 'component.index.currency'),
    FaceIndex: defineNumberComponent(world, 'FaceIndex', 'component.index.face'),
    FactionIndex: defineNumberComponent(world, 'FactionIndex', 'component.index.faction'),
    HandIndex: defineNumberComponent(world, 'HandIndex', 'component.index.hand'),
    ItemIndex: defineNumberComponent(world, 'ItemIndex', 'component.index.item'),
    NodeIndex: defineNumberComponent(world, 'NodeIndex', 'component.index.node'),
    NPCIndex: defineNumberComponent(world, 'NPCIndex', 'component.index.npc', true),
    KamiIndex: defineNumberComponent(world, 'KamiIndex', 'component.index.kami', true),
    QuestIndex: defineNumberComponent(world, 'QuestIndex', 'component.index.quest'),
    RecipeIndex: defineNumberComponent(world, 'RecipeIndex', 'component.index.recipe', true),
    RelationshipIndex: defineNumberComponent(world, 'RelationshipIndex', 'component.index.relationship'),
    RoomIndex: defineNumberComponent(world, 'RoomIndex', 'component.index.room', true),
    SkillIndex: defineNumberComponent(world, 'SkillIndex', 'component.index.skill'),
    IsComplete: defineBoolComponent(world, 'IsComplete', 'component.is.complete'),
    IsDisabled: defineBoolComponent(world, 'IsDisabled', 'component.is.disabled'),
    IsRegistry: defineBoolComponent(world, 'IsRegistry', 'component.is.registry'),
    Keys: defineNumberArrayComponent(world, 'Keys', 'component.keys'),
    Level: defineNumberComponent(world, 'Level', 'component.level'),
    Location: defineStringComponent(world, 'Location', 'component.location'),
    LogicType: defineStringComponent(world, 'LogicType', 'component.logictype'),
    Max: defineNumberComponent(world, 'Max', 'component.max'),
    MediaURI: defineStringComponent(world, 'MediaURI', 'component.mediaURI'),
    Name: defineStringComponent(world, 'Name', 'component.name', true),
    Period: defineNumberComponent(world, 'Period', 'component.period'),
    Power: defineStatComponent(world, 'Power', 'component.stat.power'),
    ProxyPermissionsERC721: defineBoolComponent(world, 'ProxyPermissionsERC721', 'components.proxy.Permissions.ERC721'),
    ProxyVIPScore: defineBoolComponent(world, 'ProxyVIPScore', 'component.proxy.vip.score'),
    Rarity: defineNumberComponent(world, 'Rarity', 'component.rarity'),
    Rate: defineNumberComponent(world, 'Rate', 'component.rate'),
    Reroll: defineNumberComponent(world, 'Reroll', 'component.reroll'),
    Scale: defineNumberComponent(world, 'Scale', 'component.scale'),
    SkillPoint: defineNumberComponent(world, 'SkillPoint', 'component.skill.point'),
    Slots: defineStatComponent(world, 'Slots', 'component.stat.slots'),
    Stamina: defineStatComponent(world, 'Stamina', 'component.stat.stamina'),
    State: defineStringComponent(world, 'State', 'component.state', true),
    Subtype: defineStringComponent(world, 'Subtype', 'component.subtype'),
    Time: defineNumberComponent(world, 'Time', 'component.Time'),
    LastActionTime: defineNumberComponent(world, 'LastActionTime', 'component.Time.LastAction'),
    NextTime: defineNumberComponent(world, 'NextTime', 'component.Time.Next'),
    LastTime: defineNumberComponent(world, 'LastTime', 'component.Time.Last'),
    ResetTime: defineNumberComponent(world, 'ResetTime', 'component.Time.Reset'),
    StartTime: defineNumberComponent(world, 'StartTime', 'component.Time.Start'),
    Type: defineStringComponent(world, 'Type', 'component.type', true),
    TokenAddress: defineStringComponent(world, 'TokenAddress', 'component.token.address'),
    TokenAllowance: defineBoolComponent(world, 'TokenAllowance', 'component.token.allowance'),
    Value: defineNumberComponent(world, 'Value', 'component.value'),
    Values: defineNumberArrayComponent(world, 'Values', 'component.values'),
    Violence: defineStatComponent(world, 'Violence', 'component.stat.violence'),
    Weights: defineNumberArrayComponent(world, 'Weights', 'component.weights'),
    Whitelist: defineNumberArrayComponent(world, 'Whitelist', 'component.whitelist'),

  // world components
  Components: defineStringComponent(world, 'Components', 'world.component.components'),
  Systems: defineStringComponent(world, 'Systems', 'world.component.systems'),

  // local components
  LoadingState: defineLoadingStateComponent(world),
  }
}